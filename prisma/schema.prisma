// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              StudentUser    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         StudentUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentUser {
    id            String    @id @default(cuid())
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    numInfractions Int @default(0)
    isActive     Boolean @default(true)

    messages      Message[] 
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Teacher {
  id           String @id @default(cuid())
  name         String @unique
  college      String
  email        String @unique 
  messages     Message[] @relation("TeacherToMessages")
  @@index([name, college])
}


model Message {
    id          String @id @default(cuid())
    student     StudentUser @relation(fields: [studentId], references: [id])
    studentId   String
    teacher     Teacher @relation("TeacherToMessages", fields: [teacherId], references: [id])
    teacherId   String
    content     String @db.VarChar()
    @@index([studentId])
}